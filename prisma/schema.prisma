generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusAppointment {
  pending
  confirmed
  completed
  canceled
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Professional Professional[]
  Client       Client[]

  @@map("users")
}

model Professional {
  id                  String                @id @default(uuid())
  userId              String                @unique
  specialty           String
  photoUrl            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  user                User                  @relation(fields: [userId], references: [id])
  ProfessionalService ProfessionalService[]

  @@map("professionals")
}

model Service {
  id                  String                @id @default(uuid())
  name                String
  description         String
  price               Float
  duration            Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ProfessionalService ProfessionalService[]

  @@map("services")
}

model ProfessionalService {
  id             String        @id @default(uuid())
  professionalId String
  serviceId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  professional   Professional  @relation(fields: [professionalId], references: [id])
  service        Service       @relation(fields: [serviceId], references: [id])
  Appointment    Appointment[]

  @@unique([professionalId, serviceId])
  @@map("professional_services")
}

model Client {
  id          String        @id @default(uuid())
  userId      String        @unique
  phone       String
  birthDate   DateTime
  gender      String
  photoUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  Appointment Appointment[]

  @@map("clients")
}

model Appointment {
  id                    String              @id @default(uuid())
  clientId              String
  professionalServiceId String
  dateTime              DateTime
  observation           String?
  status                StatusAppointment   @default(pending)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  professionalService   ProfessionalService @relation(fields: [professionalServiceId], references: [id])
  client                Client              @relation(fields: [clientId], references: [id])

  @@map("appointments")
}
